#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Created on Wed Jul 10 13:06:34 2019

@author: jasonbrant
"""

import os
import argparse

def read_fasta(fp):
    name, seq = None, []
    for line in fp:
        line = line.rstrip()
        line = line.replace("-", "")
        if line.startswith(">"):
            if name: yield (name, ''.join(seq))
            name, seq = line, []
        else:
            seq.append(line)
    if name:
        yield (name, ''.join(seq))

def get_lengths(dir_name):
    for filename in os.listdir(dir_name):
        ref_length = 0
        alignment_length = []
        if filename.endswith(".fa"):
            with open(filename) as fp:
                first_read = True
                for name, seq in read_fasta(fp):
                    if first_read:
                        ref_length = len(seq)
                        first_read = False
                    else:
                        alignment_length.append(len(seq))
                diff = max(alignment_length) - min(alignment_length)
                print("""Gene Name =\t{}
    Reference Length =\t{}
    Max Alignment Length =\t{}
    Min Alignment Length =\t{}
    Differene =\t{}
    
    """.format(filename, ref_length, max(alignment_length), min(alignment_length), diff))

parser = argparse.ArgumentParser(description = "Run get_fasta_lengths.py -h for help."
                                               "Run this script in the output directory of bsDraw to generate the "
                                               "lengths of aligned reads from an alignment fasta generated by bsDraw.py. "
                                               "This will read all the .fa files in the output directory of bsDraw and "
                                               "print to the screen the gene/fragment name, reference length, max "
                                               "alignment length, min alignment length and the difference between the "
                                               "max and min lengths. This output can be captured using redirection "
                                               "of stdout; e.g. get_fasta_lengths.py > out_file.txt")
parser.add_argument("dir_name", nargs = "?", default = os.getcwd(), help = "Directory containing the .fa files to be "
                                                                           "analyzed. ")

if __name__ == "__main__":
    args = parser.parse_args()
    get_lengths(args.dir_name)
